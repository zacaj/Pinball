/*
 * timer.c
 *
 *  Created on: Jul 14, 2014
 *      Author: zacaj
 */


uint32_t (*timerFuncs[11])();
void TIM_IRQHandler()
{
#define HANDLE_(a,i) \
	if (TIM_GetITStatus(a, TIM_IT_Update) != RESET) \
	{ \
		if(timerFuncs[i]!=NULL) \
			if(timerFuncs[i]()) \
				TIM_Cmd(a, DISABLE); \
		TIM_ClearITPendingBit(a, TIM_IT_Update); \
	}

	HANDLE_(TIM1,0)
	HANDLE_(TIM2,1)
	HANDLE_(TIM3,2)
	HANDLE_(TIM4,3)
	HANDLE_(TIM6,4)
	HANDLE_(TIM7,5)
	HANDLE_(TIM8,6)
	HANDLE_(TIM15,7)
	HANDLE_(TIM16,8)
	HANDLE_(TIM17,9)
}
void TIM1_BRK_TIM15_IRQHandler(void) {	TIM_IRQHandler(); }
void TIM8_BRK_IRQHandler(void) {	TIM_IRQHandler(); }
void TIM2_IRQHandler(void) {	TIM_IRQHandler(); }
void TIM3_IRQHandler(void) {	TIM_IRQHandler(); }
void TIM4_IRQHandler(void) {	TIM_IRQHandler(); }
void TIM7_IRQHandler(void) {	TIM_IRQHandler(); }
void TIM6_DAC_IRQHandler(void) {	TIM_IRQHandler(); }
void TIM8_CC_IRQHandler(void) {	TIM_IRQHandler(); }
void TIM8_TRG_COM_IRQHandler(void) {	TIM_IRQHandler(); }
void TIM8_UP_IRQHandler(void) {	TIM_IRQHandler(); }
void TIM1_CC_IRQHandler(void) {	TIM_IRQHandler(); }
void TIM1_TRG_COM_TIM17_IRQHandler(void) {	TIM_IRQHandler(); }
void TIM1_UP_TIM16_IRQHandler(void) {	TIM_IRQHandler(); }

const uint32_t timerIds[]={
		  TIM1,
		  TIM2,
		  TIM3,
		  TIM4,
		  TIM6,
		  TIM7,
		  TIM8,
		  TIM15,
		  TIM16,
		  TIM17
};
void setTimer(uint32_t n,uint32_t ms)
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 2*(ms*(1)) - 1;  // 1 MHz down to 1 KHz (1 ms)
	TIM_TimeBaseStructure.TIM_Prescaler = 36000 - 1; // 24 MHz Clock down to 1 MHz (adjust per your clock)
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(timerIds[n], &TIM_TimeBaseStructure);
}
void startTimer(uint32_t n)
{
	TIM_SetCounter(timerIds[n],0);
	TIM_Cmd(timerIds[n], ENABLE);
	TIM_ClearITPendingBit(timerIds[n], TIM_IT_Update);
}
void stopTimer(uint32_t n)
{
	TIM_Cmd(timerIds[n], DISABLE);
}
