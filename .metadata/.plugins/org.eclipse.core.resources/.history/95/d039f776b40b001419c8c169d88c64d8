#ifndef TIMER_H
#define TIMER_H

#endif

void startTimer(uint32_t n);
void setTimer(uint32_t n,uint32_t ms)
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 2*(ms*(1)) - 1;  // 1 MHz down to 1 KHz (1 ms)
	TIM_TimeBaseStructure.TIM_Prescaler = 36000 - 1; // 24 MHz Clock down to 1 MHz (adjust per your clock)
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(timerIds[n], &TIM_TimeBaseStructure);
}

void stopTimer(uint32_t n)
{
	TIM_Cmd(timerIds[n], DISABLE);
}

void initTimers()
{
	for(i=0;i<10;i++)
	  timerFuncs[i]=NULL;
	{
	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM15, ENABLE);
	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16, ENABLE);
	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
	}
	const IRQn_Type IRQns[13]={
		  TIM1_CC_IRQn,
		  TIM2_IRQn,
		  TIM3_IRQn,
		  TIM4_IRQn,
		  TIM6_DAC_IRQn,
		  TIM7_IRQn,
		  TIM8_BRK_IRQn,
		  TIM8_UP_IRQn,
		  TIM8_TRG_COM_IRQn,
		  TIM8_CC_IRQn,
		  TIM1_BRK_TIM15_IRQn,
		  TIM1_UP_TIM16_IRQn,
		  TIM1_TRG_COM_TIM17_IRQn
	};
	for(i=0;i<13;i++)
	{
		NVIC_InitTypeDef NVIC_InitStructure;
		/* Enable the TIM2 gloabal Interrupt */
		NVIC_InitStructure.NVIC_IRQChannel = IRQns[i];
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
		NVIC_Init(&NVIC_InitStructure);
	}
	for(i=0;i<10;i++)
	{
		TIM_ITConfig(timerIds[i], TIM_IT_Update, ENABLE);
		TIM_Cmd(timerIds[i], DISABLE);
		TIM_SetCounter(timerIds[i],0);
	}
}
