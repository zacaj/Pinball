/**
*****************************************************************************
**
**  File        : main.c
**
**  Abstract    : main function.
**
**  Functions   : main
**
**  Environment : Atollic TrueSTUDIO(R)
**
**  Distribution: The file is distributed “as is,” without any warranty
**                of any kind.
**
**  (c)Copyright Atollic AB.
**  You may use this file as-is or modify it according to the needs of your
**  project. This file may only be built (assembled or compiled and linked)
**  using the Atollic TrueSTUDIO(R) product. The use of this file together
**  with other tools than Atollic TrueSTUDIO(R) is not permitted.
**
*****************************************************************************
*/

/* Includes */
#include <stddef.h>
#include "stm32f30x.h"
#include "stm32f30x_gpio.h"
#include "stm32f30x_conf.h"
#include "stm32f3_discovery.h"
#include <stdio.h>
#include "timer.h"
/* Private typedef */

/* Private define  */

/* Private macro */

/* Private variables */
uint32_t buttonState=0;

/* Private function prototypes */

GPIO_InitTypeDef makeIOInit(uint32_t pin, GPIOMode_TypeDef mode,GPIOPuPd_TypeDef def,GPIOOType_TypeDef type, GPIOSpeed_TypeDef speed);
GPIO_InitTypeDef makeOutInit(uint32_t pin,GPIOOType_TypeDef type, GPIOSpeed_TypeDef speed);
GPIO_InitTypeDef makeInInit(uint32_t pin,GPIOPuPd_TypeDef def);
void initIO(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef init);
/* Private functions */

/* Global variables */
uint32_t timerFlag=0;


/*
 * no out: PF0,1
 * half out: PE8-15 (led)
 *
 * check:
 * PE0-5 PC14,15 PB3,6,7 PA5-7,11-14
 */
typedef struct
{
	GPIO_TypeDef* GPIOx;
	uint32_t pin;
} IOPin;

IOPin pins[8]={
#define A GPIOA
#define B GPIOB
#define C GPIOC
#define D GPIOD
#define E GPIOE
#define F GPIOF
#define P0 GPIO_Pin_0
#define P1 GPIO_Pin_1
#define P2 GPIO_Pin_2
#define P3 GPIO_Pin_3
#define P4 GPIO_Pin_4
#define P5 GPIO_Pin_5
#define P6 GPIO_Pin_6
#define P7 GPIO_Pin_7
#define P8 GPIO_Pin_8
#define P9 GPIO_Pin_9
#define P10 GPIO_Pin_10
#define P11 GPIO_Pin_11
#define P12 GPIO_Pin_12
#define P13 GPIO_Pin_13
#define P14 GPIO_Pin_14
#define P15 GPIO_Pin_15
		{C,P7},
		{D,P14},
		{D,P12},
		{D,P10},
		{D,P8},
		{B,P14},
		{B,P12},
		{B,P10},
		/*{GPIOA,GPIO_Pin_5},//out	in
		{GPIOA,GPIO_Pin_6},//out	in
		{GPIOA,GPIO_Pin_7},//out	in
		{GPIOA,GPIO_Pin_11},//0/0
		{GPIOA,GPIO_Pin_12},//0/0
		{GPIOA,GPIO_Pin_13},//1.5/3  3/3 break?
		{GPIOA,GPIO_Pin_14},//0/0	in  break?

		{GPIOB,GPIO_Pin_3},//0/0
		{GPIOB,GPIO_Pin_6},//3/3
		{GPIOB,GPIO_Pin_7},//3/3	3/3

		{GPIOC,GPIO_Pin_14},//0/0
		{GPIOC,GPIO_Pin_15},//0/0

		{GPIOE,GPIO_Pin_0},//0/.4	in
		{GPIOE,GPIO_Pin_1},//0/.4	in
		{GPIOE,GPIO_Pin_2},//2.4/3	3/3
		{GPIOE,GPIO_Pin_3},//out	in
		{GPIOE,GPIO_Pin_4},//0/.4	in
		{GPIOE,GPIO_Pin_5},//0/0	in*/
#undef A
#undef B
#undef C
#undef D
#undef E
#undef F
#undef P0
#undef P1
#undef P2
#undef P3
#undef P4
#undef P5
#undef P6
#undef P7
#undef P8
#undef P9
#undef P10
#undef P11
#undef P12
#undef P13
#undef P14
#undef P15
};
/**
 * 62 io
 * 4 i
 * 8 led
 * 1 button
 * 10 bad
 *
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/

uint32_t ii;

//return 1 to disable timer, 0 to repeat
uint32_t disableLight(void *d)
{
	GPIO_WriteBit(pins[(int)d].GPIOx,pins[(int)d].pin,0);
	STM_EVAL_LEDOff(LED3+(int)d);
	return 1;
}

int main(void)
{

  STM_EVAL_PBInit(BUTTON_USER,BUTTON_MODE_GPIO);
  /* Example use SysTick timer and read System core clock */
  SysTick_Config(72000);  /* 1 ms if clock frequency 72 MHz */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
  int i;
  for(i=0;i<8;i++)
	  initOut(pins[i]);
  initTimers();

  SystemCoreClockUpdate();
  for(i=0;i<8;i++)
	  STM_EVAL_LEDInit(LED3+i);
  ii = 7;
  int on=0;
  while (1)
  {
    if (msTicks>500)
    {
    	msTicks=0;
    	ii++;
    	if(ii>=8)
    		ii=0;
    	STM_EVAL_LEDOn(LED3+ii);
		setOut(pins[ii],1);
		callFuncIn(disableLight,1000,ii);
    }
  }
  /* Program will never run to this line */
  return 0;
}
